---
title:      Better testing, part 2 - Language in testing
created_at: 2009-12-03 15:29:55.103152 +00:00
filter:
  - erb
  - textile
---
<%= render(:partial => '/post_title')%>

Naming is one of the most important parts of programming. The same is true of testing. A badly named test is hard to understand where as a well named test can be read and understood in an instant. Not only that, good test naming can lead to a better understanding of the problem and so a better solution and a more thoroughly tested implementation.

h2. Should

A great technic for better test naming is by adding "should" to your testing vocabulary.

Let's take for example a function that give you all the distinct items that have been added to the basket.

<% coderay( :lang => "ruby", :line_numbers => "inline" ) do -%>

class BasketTest < Test::Unit::TestCase

  def setup
    @product1 = Product.new(:name => 'Cheese')
    @product2 = Product.new(:name => 'Crisps')
    @product3 = Product.new(:name => 'Soap')
  end

  # Bad testing
  def test_individual_items
    b = Basket.new
    b.add(@product1)
    b.add(@product3)
    b.add(@product1)

    assert_equal 2, b.individual_items.size
  end

  # Better
  def test_should_only_return_distinct_products_that_have_been_added
    b = Basket.new
    b.add(@product1)
    b.add(@product3)
    b.add(@product1)

    assert_equal 2, b.individual_items.size
  end

end

<% end %>

As I've done here, it's pretty common to name your test after the function you're testing, so test_individual_items tests that the individual items function is "working".

But what does "working" mean?

The second test clears that confusion up. By adding the word "should" into the name of the test case, we're forcing ourselves to think about what we actually want the function to do before coding it.

The second test also has a desirable side effect. By thinking about what the function should do and by writing that down with the word should it highlights that our original function, individual_items, is badly named, and a better name would be distinct_items.

h2. When

It's likely you're not going to only want to test the individual_items function when there are items in the basket. We could also want to test a total function that returns how much everything in the basket is going to cost me.

<% coderay( :lang => "ruby", :line_numbers => "inline" ) do -%>

class BasketTest < Test::Unit::TestCase

  def setup
    @product1 = Product.new(:name => 'Cheese', :price => 1.99)
    @product2 = Product.new(:name => 'Crisps', :price => 0.49)
    @product3 = Product.new(:name => 'Soap', , :price => 1.20)
  end

  def test_should_only_return_distinct_products_that_have_been_added
    b = Basket.new
    b.add(@product1)
    b.add(@product3)
    b.add(@product1)

    assert_equal 2, b.individual_items.size
  end

  def test_should_give_running_total_of_all_items_that_have_been_added_to_the_basket
    b = Basket.new
    b.add(@product1)
    b.add(@product3)
    b.add(@product1)

    assert_equal 3.19, b.total
  end

end

<% end %>

These test names are getting too long and there's some pretty obvious duplication going on. Here comes "When" to help out.

<% coderay( :lang => "ruby", :line_numbers => "inline" ) do -%>

class WhenItemsHaveBeenAddedToTheBasketTest < Test::Unit::TestCase

  def setup
    @product1 = Product.new(:name => 'Cheese', :price => 1.99)
    @product2 = Product.new(:name => 'Crisps', :price => 0.49)
    @product3 = Product.new(:name => 'Soap', , :price => 1.20)

    @b = Basket.new
    @b.add(@product1)
    @b.add(@product3)
    @b.add(@product1)
  end

  def test_should_only_return_distinct_products
    assert_equal 2, @b.individual_items.size
  end

  def test_should_give_a_running_total
    assert_equal 3.19, @b.total
  end

end

<% end %>

So, using the words When and Should can help your tests and implementation become more readable and more maintainable.

A great way of getting started with this kind of testing is by using "shoulda":http://github.com/thoughtbot/shoulda thoughtbots excellent extension to TestUnit.
